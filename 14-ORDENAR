

Imports Inventor
Imports System.Collections.Generic

Sub Main()
    Dim doc As AssemblyDocument = TryCast(ThisApplication.ActiveDocument, AssemblyDocument)
    If doc Is Nothing Then
        MsgBox("❌ Nenhuma montagem ativa encontrada.", vbCritical)
        Exit Sub
    End If

    Dim txn As Transaction = ThisApplication.TransactionManager.StartTransaction(doc, "Renumeração Recursiva da BOM")

    Try
        Dim viewName As String = GetStructuredBOMViewName(doc)
        If String.IsNullOrEmpty(viewName) Then
            MsgBox("❌ Nenhuma 'BOM Structured View' encontrada.", vbExclamation)
            Exit Sub
        End If

        Dim map As New Dictionary(Of String, Dictionary(Of String, String))(StringComparer.OrdinalIgnoreCase)

        ' Renumera e mapeia todos os níveis
        ProcessAssemblyRecursive(doc, viewName, map)

        ' Reaplica os Item Numbers com base no mapa
        ApplyItemNumbers(doc, viewName, map)

        MsgBox("✅ Sincronização e renumeração concluídas com sucesso!", vbInformation)

    Catch ex As Exception
        MsgBox("Erro: " & ex.Message, vbCritical)
    Finally
        txn.End()
    End Try
End Sub

' === Retorna o nome de uma BOM estruturada válida ===
Function GetStructuredBOMViewName(doc As AssemblyDocument) As String
    Dim bom As BOM = doc.ComponentDefinition.BOM
    Try : bom.StructuredViewEnabled = True : Catch : End Try

    For Each view As BOMView In bom.BOMViews
        If view.ViewType = BOMViewTypeEnum.kStructuredBOMViewType Then
            Return view.Name
        End If
    Next
    Return Nothing
End Function

' === Processa montagem recursivamente: renumera, ordena, mapeia ===
Sub ProcessAssemblyRecursive(doc As AssemblyDocument, viewName As String, map As Dictionary(Of String, Dictionary(Of String, String)))
    Dim bom As BOM = doc.ComponentDefinition.BOM
    Try
        bom.StructuredViewEnabled = True
        bom.StructuredViewFirstLevelOnly = False
        bom.StructuredViewDelimiter = "."
    Catch : End Try

    Dim bomView As BOMView = GetBOMViewSafe(doc, viewName)
    If bomView Is Nothing Then Exit Sub

    ' Ordena e renumera
    Try
        bomView.Sort("Item", True)
        bomView.Renumber(1, 1)
        doc.Update()
    Catch : End Try

    ' Processa submontagens primeiro
    For Each row As BOMRow In bomView.BOMRows
        If row.ChildRows IsNot Nothing Then
            For Each cd As ComponentDefinition In row.ComponentDefinitions
                If TypeOf cd Is AssemblyComponentDefinition Then
                    Dim subDoc As AssemblyDocument = TryCast(cd.Document, AssemblyDocument)
                    If subDoc IsNot Nothing Then
                        ProcessAssemblyRecursive(subDoc, viewName, map)
                    End If
                End If
            Next
        End If
    Next

    ' Mapeia Item Numbers
    Dim thisMap As New Dictionary(Of String, String)(StringComparer.OrdinalIgnoreCase)
    For Each row As BOMRow In bomView.BOMRows
        For Each cd As ComponentDefinition In row.ComponentDefinitions
            Dim key As String = GetComponentKey(cd)
            If Not thisMap.ContainsKey(key) Then
                thisMap(key) = row.ItemNumber
            End If
        Next
    Next
    map(doc.FullDocumentName) = thisMap
End Sub

' === Aplica os Item Numbers da submontagem para a montagem pai ===
Sub ApplyItemNumbers(doc As AssemblyDocument, viewName As String, map As Dictionary(Of String, Dictionary(Of String, String)))
    Dim bomView As BOMView = GetBOMViewSafe(doc, viewName)
    If bomView Is Nothing Then Exit Sub

    For Each row As BOMRow In bomView.BOMRows
        ApplyRecursively(row, map)
    Next
End Sub

' === Aplica os Item Numbers recursivamente ===
Sub ApplyRecursively(row As BOMRow, map As Dictionary(Of String, Dictionary(Of String, String)))
    If row.ChildRows Is Nothing Then Exit Sub

    Dim keyAsm As String = GetComponentKey(row.ComponentDefinitions(1))
    If Not map.ContainsKey(keyAsm) Then
        For Each child In row.ChildRows
            ApplyRecursively(child, map)
        Next
        Exit Sub
    End If

    Dim subMap As Dictionary(Of String, String) = map(keyAsm)
    For Each child As BOMRow In row.ChildRows
        For Each cd As ComponentDefinition In child.ComponentDefinitions
            Dim key As String = GetComponentKey(cd)
            If subMap.ContainsKey(key) Then
                child.ItemNumber = subMap(key)
                Exit For
            End If
        Next
        If child.ChildRows IsNot Nothing Then
            ApplyRecursively(child, map)
        End If
    Next
End Sub

' === Tenta retornar o BOMView de forma segura ===
Function GetBOMViewSafe(doc As AssemblyDocument, viewName As String) As BOMView
    Try
        Return doc.ComponentDefinition.BOM.BOMViews(viewName)
    Catch
        Return Nothing
    End Try
End Function

' === Cria uma chave única por componente (evita duplicidade) ===
Function GetComponentKey(cd As ComponentDefinition) As String
    Try
        If TypeOf cd Is VirtualComponentDefinition Then
            Dim partNum = cd.PropertySets("Design Tracking Properties")("Part Number").Value.ToString()
            Return "Virtual:" & partNum
        Else
            Return cd.Document.FullDocumentName.ToLower()
        End If
    Catch
        Return Guid.NewGuid().ToString()
    End Try
End Function
